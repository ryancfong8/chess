c
exit
enemy_list[15].pos
enemy_list[4].pos
enemy_list[3].pos
enemy_list[2].pos
enemy_list[1].pos
enemy_list[0]
n
display enemy_list
n
color
step
enemy_color
n
king_pos
color
c
exit
rook.moves
rook = Rook.new(:R, 'black', [0,0], self)
pawn.moves
pawn = Pawn.new(:p, 'black', [6,0], self)
self
pawn = Pawn.new(:p, 'black', [6,0], board) 
enemy.moves
enemy
step
enemy_list
n
enemy_color
n
color
king_pos
c
pos.color
pos.class
pos
row
@grid
exit
n
step
n
step
n
c
n
c
n
@color
@board[move].color
@board[move]
step
attack?(move)
n
move[1] + dir[1]
move[0] + dir[0]
display dir
dir
n
attack?(move)
n
step
valid?(move)
n
valid?(move)
n
valid?(move)
n
display move
step
n
display possible_dirs
display valid_moves
display @pos
self
c
exit
@board[[-1,0]]
@board[-1,0]
@board
self
piece.grid
board
valid?(move)
n
valid?(move)
n
valid?(move)
n
step
valid?(move)
display @pos
@pos
n
display dir
step
display possible_dirs
n
display move
display valid_moves
display self.type
self.type
exit
display self
c
exit
c
exit
n
@cursor
n
@cursor_pos
new_pos
n
display diff
step
n
step
self
display @cursor_pos
display key
n
step
n
@cursor
exit
n
step
n
@cursor
random
random = Cursor.new([0,0], @board)
random = Cursor.new([0,0], board)
self
game
game.cursor
board.cursor
self.cursor
@cursor
step
@board
display self
display @cursor
exit
c
exit
[index, i]
[row, pos]
@cursor.cursor_pos.class
@cursor.cursor_pos
@cursor
